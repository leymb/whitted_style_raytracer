head     1.233374;
access   ;
symbols  ;
locks    ;comment  @@;


1.233374
date     2021.01.29.14.48.06;  author p4;  state Exp;
branches ;
next     1.232976;

1.232976
date     2021.01.27.16.59.27;  author p4;  state Exp;
branches ;
next     1.232642;

1.232642
date     2021.01.26.16.35.24;  author p4;  state Exp;
branches ;
next     1.231282;

1.231282
date     2021.01.22.16.35.13;  author p4;  state Exp;
branches ;
next     ;


desc
@@


1.233374
log
@@
text
@#pragma once
#include "misc/cell.h"
#include "primitives/sphere.h"
#include "scenes/scene.h"

struct lightSource;
struct camera;
struct rgbColor;

class renderer
{
public:
	renderer();
	~renderer();

	void Update();

	const int SCRWIDTH = 640;
	const int SCRHEIGHT = 640;

	const int CELLAMOUNT_WIDTH = 10;
	const int CELLAMOUNT_HEIGHT = 10;

private:

	void CheckForPrimaryIntersections(ray& rAPrimaryRay, intersectionData& isdIntersectionData) const;
	void CheckForIntersection(ray& rAPrimaryRay, intersectionData& isdIntersectionData) const;
	ray CastShadowRay(vec3& aOrigin, vec3& aLightPosition, vec3& aCollideNormal, intersectionData& isdIntersectionData) const;
	vec3 CalculateShadows(intersectionData& isdData) const;
	
	vec3 CalculateDiffuseColor(bool bShadowRayOccluded, ray& rAShadowRay, lightSource& lsALightSource, vec3& v3AIntersectionNormal, material& maObjectMaterial) const;

	static float Fresnel(vec3& v3IncomingDirection, vec3& v3OutgoingDirection, vec3& v3IntersectionNormal, float fRefractIndexOne, float fRefractIndex2);
	
	vec3 Trace(ray& rPrimaryRay, int iRecursionCap);
	static vec3 ReflectRay(vec3& v3Direction, vec3& v3IntersectionNormal);
	static vec3 RefractRay(vec3& v3Direction, vec3& v3IntersectionNormal, float fInsideRefraction, float fOutsideRefraction = 1.0f);

	void ConstructGrid() const;

	// members used for acceleration
	const float CELLWIDTH = static_cast<float>(SCRWIDTH / CELLAMOUNT_WIDTH);
	const float CELLHEIGHT = static_cast<float>(SCRHEIGHT / CELLAMOUNT_HEIGHT);
	cell* m_p_cScreenCells = new cell[static_cast<__int64>(CELLAMOUNT_HEIGHT) * CELLAMOUNT_WIDTH];
	
	int m_iInterlaceStride = 64;
	int m_iCurrentInterlace = 0;

	// members needed for SDL2
	SDL_Renderer* m_p_reMainRenderer = nullptr;
	SDL_Texture* m_p_tMainTexture = nullptr;
	SDL_Window* m_p_wMainWindow = nullptr;

	// members needed directly in rendering
	camera* m_p_cMainCamera = nullptr;
	
	Uint32* m_piPixels = new Uint32[static_cast<__int64>(SCRWIDTH) * SCRHEIGHT];

	int iSceneCounter = 0;
	scene* m_p_AllScenes[10]{nullptr};
	scene* m_p_scActiveScene = m_p_AllScenes[0];
};

@


1.232976
log
@@
text
@d42 2
a43 4
	const int CELLWIDTH = SCRWIDTH / CELLAMOUNT_WIDTH;
	const int CELLHEIGHT = SCRHEIGHT / CELLAMOUNT_HEIGHT;
	const float m_fCW = static_cast<float>(SCRWIDTH / CELLAMOUNT_WIDTH);
	const float m_fCH = static_cast<float>(SCRHEIGHT / CELLAMOUNT_HEIGHT);
@


1.232642
log
@@
text
@d28 2
a29 2
	ray& CastShadowRay(vec3& aOrigin, vec3& aLightPosition, vec3& aCollideNormal, intersectionData& isdIntersectionData) const;
	vec3 CalculateShadows(intersectionData& isdData);
d44 3
a46 3
	const float m_fCW = SCRWIDTH / CELLAMOUNT_WIDTH;
	const float m_fCH = SCRHEIGHT / CELLAMOUNT_HEIGHT;
	cell* m_p_cScreenCells = new cell[CELLAMOUNT_HEIGHT * CELLAMOUNT_WIDTH];
d58 2
a59 1
	Uint32* m_piPixels = new Uint32[SCRWIDTH * SCRHEIGHT];
@


1.231282
log
@@
text
@a22 4
	const int CELLWIDTH = SCRWIDTH / CELLAMOUNT_WIDTH;
	const int CELLHEIGHT = SCRHEIGHT / CELLAMOUNT_HEIGHT;
	const float m_fCW = SCRWIDTH / CELLAMOUNT_WIDTH;
	const float m_fCH = SCRHEIGHT / CELLAMOUNT_HEIGHT;
d28 1
a28 1
	ray& CastShadowRay(vec3& aOrigin, vec3& aLightPosition, vec3 aCollideNormal, intersectionData& isdIntersectionData) const;
d31 1
a31 1
	vec3 CalculateDiffuseColor(bool bShadowRayOccluded, ray& aShadowRay, lightSource& lsALightSource, vec3& v3AIntersectionNormal, material& maObjectMaterial) const;
d33 1
a33 1
	static float Fresnel(vec3& v3IncomingDirection, vec3& v3OutgoingDirection, vec3& v3IntersectionNormal, float n1, float n2);
d35 1
a35 1
	vec3 Trace(ray rPrimaryRay, int iRecursionCap);
d39 1
a39 1
	void ConstructGrid();
d41 6
d50 2
a51 1
	
d55 2
a56 1
	
a62 2

	cell* m_p_cScreenCells = new cell[CELLAMOUNT_HEIGHT * CELLAMOUNT_WIDTH];
@
