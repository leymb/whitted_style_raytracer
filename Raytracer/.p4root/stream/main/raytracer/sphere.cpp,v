head     1.230535;
access   ;
symbols  ;
locks    ;comment  @@;


1.230535
date     2021.01.21.12.21.16;  author p4;  state Exp;
branches ;
next     1.229950;

1.229950
date     2021.01.20.14.47.20;  author p4;  state Exp;
branches ;
next     1.229432;

1.229432
date     2021.01.19.16.13.44;  author p4;  state Exp;
branches ;
next     1.229270;

1.229270
date     2021.01.19.14.03.33;  author p4;  state Exp;
branches ;
next     1.228854;

1.228854
date     2021.01.18.17.19.05;  author p4;  state Exp;
branches ;
next     1.227786;

1.227786
date     2021.01.14.15.14.47;  author p4;  state Exp;
branches ;
next     1.224939;

1.224939
date     2021.01.08.14.26.32;  author p4;  state Exp;
branches ;
next     1.222434;

1.222434
date     2020.12.18.14.31.55;  author p4;  state Exp;
branches ;
next     1.222420;

1.222420
date     2020.12.18.14.04.16;  author p4;  state Exp;
branches ;
next     1.222395;

1.222395
date     2020.12.18.13.16.08;  author p4;  state Exp;
branches ;
next     1.220942;

1.220942
date     2020.12.15.16.59.40;  author p4;  state Exp;
branches ;
next     1.220586;

1.220586
date     2020.12.15.12.56.33;  author p4;  state Exp;
branches ;
next     1.219891;

1.219891
date     2020.12.11.17.02.15;  author p4;  state Exp;
branches ;
next     1.219812;

1.219812
date     2020.12.11.13.37.52;  author p4;  state Exp;
branches ;
next     1.219559;

1.219559
date     2020.12.10.15.33.41;  author p4;  state Exp;
branches ;
next     1.219071;

1.219071
date     2020.12.09.15.20.26;  author p4;  state Exp;
branches ;
next     1.218495;

1.218495
date     2020.12.08.12.22.35;  author p4;  state Exp;
branches ;
next     1.218287;

1.218287
date     2020.12.07.17.17.07;  author p4;  state Exp;
branches ;
next     1.217271;

1.217271
date     2020.12.03.11.59.53;  author p4;  state Exp;
branches ;
next     1.216914;

1.216914
date     2020.12.02.15.57.32;  author p4;  state Exp;
branches ;
next     1.216331;

1.216331
date     2020.12.01.16.38.12;  author p4;  state Exp;
branches ;
next     1.215535;

1.215535
date     2020.11.30.11.39.20;  author p4;  state Exp;
branches ;
next     1.215370;

1.215370
date     2020.11.27.17.43.16;  author p4;  state Exp;
branches ;
next     ;


desc
@@


1.230535
log
@@
text
@#include "precomp.h"

sphere::sphere(vec3 aPosition, float aRadius)
{
	m_v3Position = aPosition;
	m_fRadius = aRadius;;
	m_maObjectMaterial = { {1.0f, 1.0f, 1.0f}, 0.9 };

	m_iPrimitiveType = spherical;
}
bool sphere::RayIntersection(ray& rPrimaryRay, intersectionData& isdData)
{
	// this function was taken (and subsequently corrected) from Jacco Bikkers first
	// lecture on ray tracing because it was far more effective than the one I employed in earlier versions

	// calculating the vector from the rays origin to the spheres center point
	const vec3 c = m_v3Position - rPrimaryRay.m_v3Origin;

	// calculating the squared length of the projection of c (the vector from the origin of
	// the ray to the spheres center point) on the rays direction
	float t = c.DotWith(rPrimaryRay.m_v3Direction);

	// 
	auto q = c - (rPrimaryRay.m_v3Direction * t);
	const float pSquared = q.DotWith(q);

	if (pSquared > (m_fRadius * m_fRadius))
	{
		return false;
	}
	
	// if the distance to the rays origin (magnitude of c) is bigger than the radius,
	// the ray starts outside of the sphere, else inside. Set t
	// and other variables accordingly

	vec3 v3IntersectionPoint;
	vec3 v3IntersectNormal;
	if (c.GetSquaredMagnitude() > (m_fRadius * m_fRadius))
	{
		t -= sqrtf((m_fRadius * m_fRadius) - pSquared);

		v3IntersectionPoint = rPrimaryRay.m_v3Origin + rPrimaryRay.m_v3Direction * t;
		v3IntersectNormal = GetIntersectionNormal(v3IntersectionPoint);

		rPrimaryRay.m_bInPrimitive = false;
		rPrimaryRay.m_fCurrentRefractionIndex = 1.10f;
	}
	else
	{
		t += sqrtf((m_fRadius * m_fRadius) - pSquared);

		v3IntersectionPoint = rPrimaryRay.m_v3Origin + rPrimaryRay.m_v3Direction * t;
		v3IntersectNormal = GetIntersectionNormal(v3IntersectionPoint) * (-1.0f);

		rPrimaryRay.m_bInPrimitive = true;
		rPrimaryRay.m_fCurrentRefractionIndex = m_maObjectMaterial.m_fRefractionIndex;
	}

	// set the distacne of the primary ray to t if the current intersection is closer
	// than the former and is not 0, set isdData
	if ((t < rPrimaryRay.m_fDistance) && (t > 0)) {

		rPrimaryRay.m_fDistance = t;

		isdData.m_bIntersectionDetected = true;
		isdData.m_v3IntersectionPoint = v3IntersectionPoint;
		isdData.m_v3IntersectionNormal = v3IntersectNormal;
		isdData.m_maTransportedMaterial = m_maObjectMaterial;
		
		return true;
	}
}

vec3 sphere::GetIntersectionNormal(vec3& intersectionPoint)
{
	return ((intersectionPoint - m_v3Position).Normalize());
}

vec3 sphere::GetScreenspaceCoordinate(vec3& v3Origin, vec3& v3Left, vec3& v3Right, vec3& v3Up, vec3& v3Down, int iScrwidth, int iScrheight, float fViewportWidth, float& RadiusInPixels)
{
	vec3 v3ScreenPos;
	v3ScreenPos.z = 0;
	
	// assigning temporary vectors to not change the values of the
	// vectors passed by reference
	vec3 v3LeftTemp = v3Left;
	vec3 v3RightTemp = v3Right;

	vec3 v3TempPosition = m_v3Position;

	// setting the y value of left and right to 0 to get the
	// correct length
	v3TempPosition.y = 0;
	v3LeftTemp.y = 0;
	v3RightTemp.y = 0;

	v3LeftTemp.Normalize();
	v3RightTemp.Normalize();
	
	// calculate Vector from sphere center to origin
	vec3 v3VecToOrigin = v3TempPosition - v3Origin;

	// calculate the length of the projection of the vector
	// onto the left and right vector
	float fLeftLength = v3VecToOrigin.DotWith(v3LeftTemp);
	float fRightLength = v3VecToOrigin.DotWith(v3RightTemp);

	// calculating the point on left or right closest to
	// the sphere's origin
	vec3 v3PointLeft = v3Origin + v3LeftTemp * fLeftLength;
	vec3 v3PointRight = v3Origin + v3RightTemp * fRightLength;

	// calculating the distance between the sphere's center and
	// the left and right point
	float fLeftDist = (v3TempPosition - v3PointLeft).GetMagnitude();
	float fRightDist = (v3TempPosition - v3PointRight).GetMagnitude();

	// calculate screenpos x
	float fTotalDist = fLeftDist + fRightDist;
	float fScale = fLeftDist / fTotalDist;

	v3ScreenPos.x = fScale * iScrwidth;


	// doing the same for the y position
	vec3 v3UpTemp = v3Up;
	vec3 v3DownTemp = v3Down;

	v3TempPosition = m_v3Position;

	// setting the x value of left and right to 0 to get the
	// correct length
	v3TempPosition.x = 0;
	v3UpTemp.x = 0;
	v3DownTemp.x = 0;

	v3UpTemp.Normalize();
	v3DownTemp.Normalize();

	// calculate Vector from sphere center to origin
	v3VecToOrigin = v3TempPosition - v3Origin;

	// calculate the length of the projection of the vector
	// onto the up and down vector
	float fUpLength = v3VecToOrigin.DotWith(v3UpTemp);
	float fDownLength = v3VecToOrigin.DotWith(v3DownTemp);

	// calculating the point on up or down closest to
	// the sphere's origin
	vec3 v3PointUp = v3Origin + v3UpTemp * fUpLength;
	vec3 v3PointDown = v3Origin + v3DownTemp * fDownLength;

	// calculating the distance between the sphere's center and
	// the upper and down point
	float fUpDist = (v3TempPosition - v3PointUp).GetMagnitude();
	float fDownDist = (v3TempPosition - v3PointDown).GetMagnitude();

	// calculate screenpos y
	fTotalDist = fUpDist + fDownDist;
	fScale = fUpDist / fTotalDist;

	v3ScreenPos.y = fScale * iScrheight;

	

	// calculate on screen radius
	// for a detailed explanation of the maths of this code
	// and the naming refer to this graph: https://bit.ly/2NjDbtn

	// calculating a1
	v3TempPosition = m_v3Position;
	v3VecToOrigin = v3TempPosition - v3Origin;
	vec3 v3C1 = {0, 0, 2};
	float cMagnitude = v3VecToOrigin.DotWith(v3C1);
	vec3 v3OriginToT = v3Origin + v3C1 * cMagnitude;
	vec3 v3B2 = v3VecToOrigin - v3OriginToT;
	vec3 v3B1 = v3B2 * ((v3C1.GetMagnitude()) / cMagnitude);
	vec3 v3A1 = v3C1 + v3B1;

	// calculating the radius
	float rPrime = m_fRadius * v3A1.GetMagnitude() / v3VecToOrigin.GetMagnitude();
	float fProportionOnScreen = rPrime / fViewportWidth;
	// TODO delete the +10, this is a temporary fix
	RadiusInPixels = fProportionOnScreen * iScrwidth + 10;
	
	return v3ScreenPos;
}
@


1.229950
log
@@
text
@d167 4
a171 1
	//v3TempPosition.y = 0;
d173 6
a178 13
	
	vec3 c1 = {0, 0, 2};
	float cMagnitude = v3VecToOrigin.DotWith(c1);

	vec3 v3OriginToT = v3Origin + c1 * cMagnitude;

	vec3 b2 = v3VecToOrigin - v3OriginToT;

	vec3 b1 = b2 * ((c1.GetMagnitude()) / cMagnitude);

	vec3 a1 = c1 + b1;

	float rPrime = m_fRadius * a1.GetMagnitude() / v3VecToOrigin.GetMagnitude();
d180 2
a182 1

@


1.229432
log
@@
text
@d79 1
a79 1
vec3 sphere::GetScreenspaceCoordinate(vec3& v3Origin, vec3& v3Left, vec3& v3Right, vec3& v3Up, vec3& v3Down, int iScrwidth, int iScrheight)
d165 24
@


1.229270
log
@@
text
@d78 89
@


1.228854
log
@@
text
@d8 2
@


1.227786
log
@@
text
@d29 4
d34 5
a38 6
	// get distance
	// depending on whether or not the ray is in a sphere already, use
	// t-= or t+=
	float fDistance = sqrtf((m_fRadius * m_fRadius) - pSquared);
	t -= fDistance * !rPrimaryRay.m_bInPrimitive;
	t += fDistance * rPrimaryRay.m_bInPrimitive;
d40 2
d43 6
a48 1
	//t-= sqrtf((m_fRadius * m_fRadius) - pSquared);
d50 9
a58 1
	
d60 1
d63 4
a66 3
		vec3 v3IntersectionPoint = rPrimaryRay.m_v3Origin + rPrimaryRay.m_v3Direction * t;
		vec3 v3IntersectNormal = GetIntersectionNormal(v3IntersectionPoint);
		isdData = { true, v3IntersectionPoint, v3IntersectNormal, m_maObjectMaterial};
a69 4
	
	////TODO delete this, this safeguard is probably not needed anymore
	///*isdData.m_bIntersectionDetected = false;
	//return false;*/
@


1.224939
log
@@
text
@d30 11
a40 1
	t -= sqrtf((m_fRadius * m_fRadius) - pSquared);
d51 3
a53 3
	//TODO delete this, this safeguard is probably not needed anymore
	/*isdData.m_bIntersectionDetected = false;
	return false;*/
@


1.222434
log
@@
text
@d7 1
a7 1
	m_maObjectMaterial = { {1.0f, 1.0f, 1.0f}, 1 };
d11 4
a14 3
	//this function was taken (and subsequently corrected) from Jacco Bikkers first lecture on ray tracing because it was
	//far more effective than the one I employed in earlier versions
	
d16 3
d20 2
@


1.222420
log
@@
text
@d7 1
a7 1
	m_maObjectMaterial = { {1.0f, 0.0f, 0.0f}, 1 };
@


1.222395
log
@@
text
@d30 1
a30 1
		isdData = { true, v3IntersectionPoint, v3IntersectNormal, m_maObjectMaterial.m_v3Color };
@


1.220942
log
@@
text
@d6 2
a7 2
	m_fRadius = aRadius;
	m_v3Color = {1.0f, 0.0f, 0.0f};
d27 5
a31 3
		isdData.m_v3Color = m_v3Color;
		isdData.m_v3IntersectionPoint = rPrimaryRay.m_v3Origin + rPrimaryRay.m_v3Direction * t;
		isdData.m_bIntersectionDetected = true;
d34 4
a37 1
	return false;
@


1.220586
log
@@
text
@d7 1
a7 1
	m_v3Color = {0.0f, 1.0f, 0.0f};
@


1.219891
log
@@
text
@d7 1
a7 1
	m_v3Color = {1.0f, 0.0f, 0.0f};
d27 1
a27 1
		rPrimaryRay.m_v3Color = m_v3Color;
d29 1
d35 1
a35 1
vec3 sphere::getIntersectionNormal(vec3& intersectionPoint)
@


1.219812
log
@@
text
@d29 1
d31 7
a37 2
	return true;
};
@


1.219559
log
@@
text
@d27 1
a27 1
		isdData.m_v3TransportedColor = m_v3Color;
@


1.219071
log
@@
text
@d9 1
a9 1
intersectionData sphere::RayIntersection(ray& rPrimaryRay)
d12 1
a12 1
	//far more effective than the on I employed in earlier versions
d19 4
a22 1
	if (pSquared > (m_fRadius * m_fRadius)) return { false, vec3{}, vec3{} };
d25 6
a30 2
	if ((t < rPrimaryRay.m_fDistance) && (t > 0)) rPrimaryRay.m_fDistance = t;
	return { true, q, m_v3Color };
@


1.218495
log
@@
text
@d9 1
a9 2

bool sphere::RayIntersection(ray& rPrimaryRay)
d19 1
a19 1
	if (pSquared > (m_fRadius * m_fRadius)) return false;
d23 1
a23 1
	return true;
@


1.218287
log
@@
text
@d17 1
a17 1
	auto q = c - (rPrimaryRay.m_v3Direction * sqrtf(t));
@


1.217271
log
@@
text
@a1 1
#include "sphere.h"
d12 7
a18 6
	//this function was taken from Raytracing in one weekend, that can be found here: https://raytracing.github.io/books/RayTracingInOneWeekend.html#outputanimage
	vec3 temp = (rPrimaryRay.m_v3Origin) - m_v3Position;

	float a = rPrimaryRay.m_v3Direction.DotWith(rPrimaryRay.m_v3Direction);
	float b = 2.f * temp.DotWith(rPrimaryRay.m_v3Direction);
	float c = temp.DotWith(temp) - m_fRadius * m_fRadius;
d20 1
a20 1
	float discriminant = b * b - 4 * a * c;
d22 3
a24 1
	return discriminant > 0.f;
@


1.216914
log
@@
text
@d14 1
a14 1
	vec3 temp = (rPrimaryRay.origin) - m_v3Position;
d16 2
a17 2
	float a = rPrimaryRay.direction.DotWith(rPrimaryRay.direction);
	float b = 2.f * temp.DotWith(rPrimaryRay.direction);
@


1.216331
log
@@
text
@d1 1
a10 4
sphere::~sphere()
{
}

d14 1
a14 1
	vec3 temp = *(rPrimaryRay.origin) - m_v3Position;
d23 1
a23 1
}
@


1.215535
log
@@
text
@d5 3
a7 2
	v3Position = aPosition;
	fRadius = aRadius;
d17 1
a17 1
	vec3 temp = *(rPrimaryRay.origin) - v3Position;
d21 1
a21 1
	float c = temp.DotWith(temp) - fRadius * fRadius;
@


1.215370
log
@@
text
@d15 2
a16 9
	//printf("Intersection called");

	//solve for tc
	vec3 L = v3Position - *(rPrimaryRay.origin);
	float tc = L.DotWith(rPrimaryRay.direction);
	if (tc < 0.0) return false;

	float d = sqrt((tc * tc) - (L.DotWith(L)));
	if (d > fRadius) return false;
d18 3
a20 2
	//solve for t1c
	float t1c = sqrtf((fRadius * fRadius) - (d * d));
d22 1
a22 3
	//solve for intersection points
	float t1 = tc - t1c;
	float t2 = tc + t1c;
d24 1
a24 1
	return true;
@
