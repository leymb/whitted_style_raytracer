head     1.232976;
access   ;
symbols  ;
locks    ;comment  @@;


1.232976
date     2021.01.27.16.59.27;  author p4;  state Exp;
branches ;
next     1.232694;

1.232694
date     2021.01.26.17.13.46;  author p4;  state Exp;
branches ;
next     1.228099;

1.228099
date     2021.01.15.10.15.31;  author p4;  state Exp;
branches ;
next     1.218296;

1.218296
date     2020.12.07.17.32.15;  author p4;  state Exp;
branches ;
next     1.217001;

1.217001
date     2020.12.02.16.55.19;  author p4;  state Exp;
branches ;
next     1.216914;

1.216914
date     2020.12.02.15.57.32;  author p4;  state Exp;
branches ;
next     1.215369;

1.215369
date     2020.11.27.17.42.51;  author p4;  state Exp;
branches ;
next     1.215128;

1.215128
date     2020.11.26.17.56.45;  author p4;  state Exp;
branches ;
next     1.214324;

1.214324
date     2020.11.24.17.20.26;  author p4;  state Exp;
branches ;
next     1.214310;

1.214310
date     2020.11.24.17.10.34;  author p4;  state Exp;
branches ;
next     1.214106;

1.214106
date     2020.11.23.17.16.13;  author p4;  state Exp;
branches ;
next     ;


desc
@@


1.232976
log
@@
text
@#include "precomp.h"

int main(int, char** )
{
	const bool exit = 0;
    renderer rMainRenderer;

    SDL_Event event;


    while (!exit)
    {
        while (SDL_PollEvent(&event) != 0);
    	
        rMainRenderer.Update();

    }
    return 0;
}




@


1.232694
log
@@
text
@d3 1
a3 1
int main(int argc, char* args[])
@


1.228099
log
@@
text
@d5 2
a6 2
    bool exit = 0;
    renderer MainRenderer;
d15 2
a16 1
        MainRenderer.Update();
@


1.218296
log
@@
text
@d8 2
d13 2
a15 2


@


1.217001
log
@@
text
@d6 1
a6 1
    Renderer MainRenderer;
@


1.216914
log
@@
text
@a1 6
#include <SDL.h>
#include <stdio.h>
#include "../Raytracer/vec3.h"
#include "../Raytracer/ray.h"
#include "sphere.h"
#include "main.h"
a2 18
const int SCRWIDTH = 600;
const int SCRHEIGHT = 600;


void Clamp(int& value, int hi, int lo) {

    if (value > hi)
    {
        value = hi;
    }
    else if (value < lo)
    {
        value = lo;
    }
}



d6 1
a6 20

    Uint32* pixels = new Uint32[SCRWIDTH * SCRHEIGHT];
    vec3 color = { 0, 0, 0 };

    SDL_Window* p_Window = SDL_CreateWindow("Raytracer", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCRWIDTH, SCRHEIGHT, SDL_WINDOW_SHOWN);
    SDL_Renderer* p_Renderer = SDL_CreateRenderer(p_Window, -1, SDL_RENDERER_ACCELERATED);

    vec3 camera = { 0,0,0 };
    vec3 v3CameraDirection = { 0 , 0, 1 };
    vec3 c = camera + v3CameraDirection; // normally c = cameraPos + distance * direction, but in this case, distance = 1
    vec3 p0 = c + vec3(-1, 1, 0);
    vec3 p1 = c + vec3(1, 1, 1);
    vec3 p2 = c + vec3(-1, -1, 0);

    sphere spTestSphere = {vec3(0, 0, 15), 5.0f};
    
    
    //---------------------------------------------------------------------------------------------------------------------------------------------
    //a lot of this was taken from https://gigi.nullneuron.net/gigilabs/sdl2-pixel-drawing/ because it was the least complex way of coloring
    //single pixels I could find
a7 1
    SDL_Texture* p_Texture = SDL_CreateTexture(p_Renderer, SDL_PIXELFORMAT_ARGB8888, SDL_TEXTUREACCESS_STREAMING, SCRWIDTH, SCRHEIGHT);
d11 1
a11 43
        SDL_RenderClear(p_Renderer);
        SDL_UpdateTexture(p_Texture, NULL, pixels, (SCRWIDTH * sizeof(Uint32)));

        for (int y = 0; y < SCRHEIGHT; y++)
        {
            //unsigned int* lineStart = pixels + y * SCRWIDTH; //this optimization was shamelessly stolen from Professor Jacco Bikker

            for (int x = 0; x < SCRWIDTH; x++)
            {
                float u = static_cast<float>(x) / (SCRWIDTH - 1);
                float v = static_cast<float>(y) / (SCRHEIGHT - 1);

                vec3 v3TempDir = p0 + ((p1 - p0) * u) + ((p2 - p0) * v);

                ray rPrimaryRay = {camera, v3TempDir, 1.0};
                
                for (int i = 0; i < 10; i++)
                {
                    if (spTestSphere.RayIntersection(rPrimaryRay)) //only for testing, should be shAllShapes[i].RayIntersection(rPrimaryRay)
                    {
                        color = spTestSphere.m_v3Color;
                    }
                    else
                    {
                       color.x = 0.0f;
                       color.y = 0.0f;
                       color.z = 0.0f;
                    }
                }


                int r = static_cast<int>(256.0f * color.x);
                Clamp(r, 255, 0);

                int g = static_cast<int>(256.0f * color.y);
                Clamp(g, 255, 0);

                int b = static_cast<int>(256.0f * color.z);
                Clamp(b, 255, 0);

                pixels[y * SCRWIDTH + x] = b + (g << 8) + (r << 16); //this is taken from Jacco Bikkers "Hitting the ground running lecture"
            }
        }
a12 2
        SDL_RenderCopy(p_Renderer, p_Texture, NULL, NULL);
        SDL_RenderPresent(p_Renderer);
a14 7

    delete[] pixels;
    SDL_DestroyTexture(p_Texture);
    SDL_DestroyRenderer(p_Renderer);

    //---------------------------------------------------------------------------------------------------------------------------------------------

@


1.215369
log
@@
text
@d1 1
a1 2
//This is only a test of some SDL features, this code will be replaced by actual code for the raytracer later

d32 1
a32 1
    point color = { 0, 0, 0 };
a43 2

    //primitive shAllShapes[10];
a44 1
    //shAllShapes[0] = spTestSphere;
d46 1
d55 1
d60 1
a60 1
            //unsigned int* lineStart = pixels + y * SCRWIDTH; //this optimization was shamelessly stolen from Professor Jacco Bikker for optimization
d64 2
a65 2
                float u = static_cast<float>(x) / SCRWIDTH;
                float v = static_cast<float>(y) / SCRHEIGHT;
d69 1
a69 1
                ray rPrimaryRay = {&camera, v3TempDir, 1.0};
d75 1
a75 3
                        color.x = 1;
                        color.y = 0;
                        color.z = 0;
d79 3
a81 3
                        color.x = 0.0f;
                        color.y = 0.0f;
                        color.z = 0.0f;
a98 1
        SDL_RenderClear(p_Renderer);
@


1.215128
log
@@
text
@a4 1
#include <algorithm>
d7 1
d38 6
a43 3

    //---------------------------------------------------------------------------------------------------------------------------------------------
    //this is for testing purposes only
a44 1
    ray* p_rAllRays = new ray[SCRWIDTH * SCRHEIGHT];
d46 4
d66 2
a67 1

d69 1
d71 17
@


1.214324
log
@@
text
@d5 4
d14 1
a14 8
struct testSquare
{
    int x = 0;
    int y = 0;
    int width = 100;
    int height = 100;

};
d16 9
a24 4
struct testCircle
{
    int x = 0;
    int y = 0;
a25 2
    int radius = 5;
};
d28 3
a30 3
int GetDistance(int x1, int y1, int x2, int y2) {
    float a = x2 - x1;
    float b = y2 - y1;
d32 2
a33 2
    return sqrtf((a * a) + (b * b));
}
d35 2
a37 3
int main(int argc, char* args[])
{
    bool quit = false;
d39 2
d42 1
a42 1
    SDL_Init(SDL_INIT_VIDEO);
d44 3
a46 2
    SDL_Window* p_Window;
    SDL_Renderer* p_Renderer;
d48 1
a48 3
    testSquare Square;
    Square.x = (SCRWIDTH/2) - (Square.width/2);
    Square.y = (SCRHEIGHT/2) - (Square.height / 2);
d50 3
a52 4
    testCircle Circle;
    Circle.radius = 100;
    Circle.x = 200;
    Circle.y = 200;
d54 3
a56 3
    //---------------------------------------------------------------------------------------
    //this part was taken from the SDL Wiki (however, the variable names were changed to suit 
    //my style of hungarian notation & for better readability): https://wiki.libsdl.org/SDL_CreateRGBSurface
d58 2
a59 4
    Uint32 U32RedMask = 0x00;
    Uint32 U32GreenMask = 0x00;
    Uint32 U32BlueMask = 0x00;
    Uint32 U32AlphaMask = 0x00;
a60 14
    /* SDL interprets each pixel as a 32-bit number, so our masks must depend
       on the endianness (byte order) of the machine */
    if (SDL_BYTEORDER == SDL_BIG_ENDIAN) {
        U32RedMask = 0xff000000;
        U32GreenMask = 0x00ff0000;
        U32BlueMask = 0x0000ff00;
        U32AlphaMask = 0x000000ff;
    }
    else {
        U32RedMask = 0x000000ff;
        U32GreenMask = 0x0000ff00;
        U32BlueMask = 0x00ff0000;
        U32AlphaMask = 0xff000000;
    }
a61 1
    //-------------------------------------------------------------------------------------
a62 3
    SDL_Surface* p_MainSurface = SDL_CreateRGBSurface(0, SCRWIDTH, SCRHEIGHT, 32, U32RedMask, U32GreenMask, U32BlueMask, U32AlphaMask);
    SDL_CreateWindowAndRenderer(SCRWIDTH, SCRHEIGHT, SDL_WINDOW_SHOWN, &p_Window, &p_Renderer);
    SDL_SetWindowTitle(p_Window, "Mel's SDL_Test");
a63 2
    SDL_Texture* p_TestTexture = SDL_CreateTextureFromSurface(p_Renderer, p_MainSurface);
    SDL_FreeSurface(p_MainSurface);
d65 2
a66 1
    SDL_SetRenderTarget(p_Renderer, p_TestTexture);
d68 2
a69 4
    Uint8 a = 255;
    Uint8 r = 255;
    Uint8 g = 0;
    Uint8 b = 255;
d71 2
a72 5
    for (int h = 0; h <= SCRHEIGHT; h++)
    {
        printf("\nLines R=remaining: %d", (SCRHEIGHT - h)); //I stole the idea to make some kind of progress indicator from https://raytracing.github.io/books/RayTracingInOneWeekend.html#outputanimage
        for (int w = 0; w < SCRWIDTH; w++)
        {
d74 1
a74 18
            if ((h < (Square.y + Square.height)) && (h >= Square.y)
                && (w < (Square.x + Square.width)) && (w >= Square.x))
            {
                r = (Uint8)255;
                g = (Uint8)0;
                b = (Uint8)0;
            }
            else if (GetDistance(w, h, Circle.x, Circle.y) < Circle.radius)
            {
                r = (Uint8)0;
                g = (Uint8)0;
                b = (Uint8)0;
            }
            else
            {
                r = (Uint8)h;
                g = (Uint8)(h + w);
                b = (Uint8)w;
a75 3

            SDL_SetRenderDrawColor(p_Renderer, r, g, b, a);
            SDL_RenderDrawPoint(p_Renderer, w, h);
d77 5
d84 3
a86 1
    SDL_RenderPresent(p_Renderer);
d88 1
a88 1
    SDL_Delay(2000);
d93 3
@


1.214310
log
@@
text
@a93 4
    
    while (!quit) //infinite loop is intentional
    {
        SDL_RenderClear(p_Renderer);
d95 4
a98 1
        for (int h = 0; h <= SCRHEIGHT; h++)
a99 3
            printf("\nLines R=remaining: %d", (SCRHEIGHT - h)); //I stole the idea to make some kind of progress indicator from https://raytracing.github.io/books/RayTracingInOneWeekend.html#outputanimage
            for (int w = 0; w < SCRWIDTH; w++)
            {
d101 6
a106 22
                if ((h < (Square.y + Square.height)) && (h >= Square.y)
                    && (w < (Square.x + Square.width)) && (w >= Square.x))
                {
                    r = (Uint8)255;
                    g = (Uint8)0;
                    b = (Uint8)0;
                }
                else if (GetDistance(w, h, Circle.x, Circle.y) < Circle.radius)
                {
                    r = (Uint8)0;
                    g = (Uint8)0;
                    b = (Uint8)0;
                }
                else
                {
                    r = (Uint8)h;
                    g = (Uint8)(h + w);
                    b = (Uint8)w;
                }

                SDL_SetRenderDrawColor(p_Renderer, r, g, b, a);
                SDL_RenderDrawPoint(p_Renderer, w, h);
d108 12
a119 1
        }
d121 3
a123 1
        SDL_RenderPresent(p_Renderer);
d126 4
@


1.214106
log
@@
text
@d1 1
a1 3
//This code is only in here to test if SDL2 is set up correctly. It will be deleted at a later time.
//It was taken from LazyFoo's tutorial to SDL (from which I learned how to use & set uo
//projects using SDL). You can find it here: http://lazyfoo.net/tutorials/SDL/01_hello_SDL/windows/msvc2019/index.php
a2 1
//Using SDL and standard IO
d6 21
a26 3
//Screen dimension constants
const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;
d28 8
d38 1
a38 2
    //The window we'll be rendering to
    SDL_Window* window = NULL;
a39 2
    //The surface contained by the window
    SDL_Surface* screenSurface = NULL;
d41 30
a70 4
    //Initialize SDL
    if (SDL_Init(SDL_INIT_VIDEO) < 0)
    {
        printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
d72 24
a95 1
    else
d97 1
a97 10
        //Create window
        window = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
        if (window == NULL)
        {
            printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
        }
        else
        {
            //Get window surface
            screenSurface = SDL_GetWindowSurface(window);
d99 5
a103 2
            //Fill the surface white
            SDL_FillRect(screenSurface, NULL, SDL_MapRGB(screenSurface->format, 0xFFFFFF, 0x00, 0x00));
d105 19
a123 2
            //Update the surface
            SDL_UpdateWindowSurface(window);
d125 3
a127 2
            //Wait two seconds
            SDL_Delay(2000);
d129 2
d132 1
d134 2
a135 1
}@
