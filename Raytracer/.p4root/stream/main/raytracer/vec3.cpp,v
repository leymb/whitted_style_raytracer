head     1.228237;
access   ;
symbols  ;
locks    ;comment  @@;


1.228237
date     2021.01.15.16.06.06;  author p4;  state Exp;
branches ;
next     1.220953;

1.220953
date     2020.12.15.17.03.27;  author p4;  state Exp;
branches ;
next     1.219624;

1.219624
date     2020.12.10.16.35.37;  author p4;  state Exp;
branches ;
next     1.218296;

1.218296
date     2020.12.07.17.32.15;  author p4;  state Exp;
branches ;
next     1.218230;

1.218230
date     2020.12.07.16.19.54;  author p4;  state Exp;
branches ;
next     1.217806;

1.217806
date     2020.12.04.16.33.49;  author p4;  state Exp;
branches ;
next     1.217542;

1.217542
date     2020.12.03.16.53.34;  author p4;  state Exp;
branches ;
next     1.216914;

1.216914
date     2020.12.02.15.57.32;  author p4;  state Exp;
branches ;
next     1.214822;

1.214822
date     2020.11.26.13.43.43;  author p4;  state Exp;
branches ;
next     ;


desc
@@


1.228237
log
@@
text
@#include "precomp.h"

@


1.220953
log
@@
text
@a2 102
vec3::vec3(float aX, float aY, float aZ)
{
	x = aX;
	y = aY;
	z = aZ;
}

vec3& vec3::Normalize()
{
	const auto m = 1.f / GetMagnitude();

	*this = *this * m;

	return *this;
}

float vec3::GetMagnitude() const
{

	return sqrtf((x * x) + (y * y) + (z * z));
}

float vec3::GetSquaredMagnitude() const
{
	return ((x * x) + (y * y) + (z * z));
}

float vec3::DotWith(vec3& vector) const
{
	const auto fScalar = (x * vector.x) + (y * vector.y) + (z * vector.z);
	return fScalar;
}

vec3 vec3::CrossWith(vec3& vector) const
{
	vec3 v3CrossedVector = { 0,0,0 };

	v3CrossedVector.x = (y * vector.z) - (z * vector.y);
	v3CrossedVector.y = (z * vector.x) - (x * vector.z);
	v3CrossedVector.z = (x * vector.y) - (y * vector.x);

	return v3CrossedVector;
}

vec3 vec3::operator+(const vec3& v3) const
{
	return vec3(x + v3.x, y + v3.y, z + v3.z);
}

vec3 vec3::operator-(const vec3& v3) const
{
	return vec3(x - v3.x, y - v3.y, z - v3.z);
}

vec3 vec3::operator*(const vec3& v3) const
{
	return vec3(x * v3.x, y * v3.y, z * v3.z);
}

vec3 vec3::operator*(const float& f) const
{
	return vec3(x * f, y * f, z * f);
}

void vec3::operator+=(const vec3& other)
{
	x += other.x;
	y += other.y;
	z += other.z;
}

void vec3::operator-=(const vec3& other)
{
	x -= other.x;
	y -= other.y;
	z -= other.z;
}

void vec3::operator*=(const vec3& other)
{
	x *= other.x;
	y *= other.y;
	z *= other.z;
}

bool vec3::operator==(const vec3& other) const
{
	if (x == other.x
		&& y == other.y
		&& z == other.z
		)
	{
		return true;
	}
	else return false;
}

bool vec3::operator!=(const vec3& other) const
{
	return !(*this == other);
}

@


1.219624
log
@@
text
@d12 1
a12 1
	const auto m = 1.f/GetMagnitude();
d21 1
d25 5
d67 38
@


1.218296
log
@@
text
@d12 1
a12 1
	const auto m = 1/GetMagnitude();
d14 1
a14 1
	*this * m;
@


1.218230
log
@@
text
@d2 1
a2 1
#include "vec3.h"
@


1.217806
log
@@
text
@d12 1
a12 1
	const auto m = GetMagnitude();
d14 1
a14 6
	if (m != 1)
	{
		x /= m;
		y /= m;
		z /= m;
	}
@


1.217542
log
@@
text
@d12 1
a12 1
	float m = GetMagnitude();
d24 1
a24 1
float vec3::GetMagnitude()
d29 1
a29 1
float vec3::DotWith(vec3& vector)
d31 1
a31 1
	float fScalar = (x * vector.x) + (y * vector.y) + (z * vector.z);
d35 1
a35 1
vec3 vec3::CrossWith(vec3& vector)
d46 1
a46 1
vec3 vec3::operator+(const vec3& v3)
d51 1
a51 1
vec3 vec3::operator-(const vec3& v3)
d56 1
a56 1
vec3 vec3::operator*(const vec3& v3)
d61 1
a61 1
vec3 vec3::operator*(const float& f)
@


1.216914
log
@@
text
@d10 1
a10 5
vec3::~vec3()
{
}

void vec3::Normalize()
d20 2
@


1.214822
log
@@
text
@d1 1
d47 21
@
