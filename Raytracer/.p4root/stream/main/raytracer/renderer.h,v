head     1.231139;
access   ;
symbols  ;
locks    ;comment  @@;


1.231139
date     2021.01.22.13.16.13;  author p4;  state Exp;
branches ;
next     1.230304;

1.230304
date     2021.01.20.19.11.22;  author p4;  state Exp;
branches ;
next     1.229950;

1.229950
date     2021.01.20.14.47.20;  author p4;  state Exp;
branches ;
next     1.228854;

1.228854
date     2021.01.18.17.19.05;  author p4;  state Exp;
branches ;
next     1.228236;

1.228236
date     2021.01.15.16.05.29;  author p4;  state Exp;
branches ;
next     1.228098;

1.228098
date     2021.01.15.10.15.13;  author p4;  state Exp;
branches ;
next     1.225059;

1.225059
date     2021.01.08.17.21.59;  author p4;  state Exp;
branches ;
next     1.223997;

1.223997
date     2021.01.06.14.49.15;  author p4;  state Exp;
branches ;
next     1.222449;

1.222449
date     2020.12.18.15.25.10;  author p4;  state Exp;
branches ;
next     1.222417;

1.222417
date     2020.12.18.14.02.50;  author p4;  state Exp;
branches ;
next     1.222402;

1.222402
date     2020.12.18.13.28.34;  author p4;  state Exp;
branches ;
next     1.222395;

1.222395
date     2020.12.18.13.16.08;  author p4;  state Exp;
branches ;
next     1.222025;

1.222025
date     2020.12.17.12.41.53;  author p4;  state Exp;
branches ;
next     1.221921;

1.221921
date     2020.12.17.11.06.13;  author p4;  state Exp;
branches ;
next     1.221886;

1.221886
date     2020.12.17.10.21.24;  author p4;  state Exp;
branches ;
next     1.220586;

1.220586
date     2020.12.15.12.56.33;  author p4;  state Exp;
branches ;
next     1.219891;

1.219891
date     2020.12.11.17.02.15;  author p4;  state Exp;
branches ;
next     1.219624;

1.219624
date     2020.12.10.16.35.37;  author p4;  state Exp;
branches ;
next     1.219071;

1.219071
date     2020.12.09.15.20.25;  author p4;  state Exp;
branches ;
next     1.218625;

1.218625
date     2020.12.08.15.34.08;  author p4;  state Exp;
branches ;
next     1.218495;

1.218495
date     2020.12.08.12.22.35;  author p4;  state Exp;
branches ;
next     1.218296;

1.218296
date     2020.12.07.17.32.15;  author p4;  state Exp;
branches ;
next     1.218287;

1.218287
date     2020.12.07.17.17.07;  author p4;  state Exp;
branches ;
next     1.217806;

1.217806
date     2020.12.04.16.33.49;  author p4;  state Exp;
branches ;
next     1.217528;

1.217528
date     2020.12.03.16.43.18;  author p4;  state Exp;
branches ;
next     1.216991;

1.216991
date     2020.12.02.16.52.20;  author p4;  state Exp;
branches ;
next     1.216917;

1.216917
date     2020.12.02.15.58.06;  author p4;  state Exp;
branches ;
next     ;


desc
@@


1.231139
log
@@
text
@#pragma once
#include "cell.h"
#include "sphere.h"
#include "scene.h"

struct lightSource;
struct camera;
struct rgbColor;

class renderer
{
public:
	renderer();
	~renderer();

	void Update();

	const int SCRWIDTH = 640;
	const int SCRHEIGHT = 640;

	const int CELLAMOUNT_WIDTH = 10;
	const int CELLAMOUNT_HEIGHT = 10;
	const int CELLWIDTH = SCRWIDTH / CELLAMOUNT_WIDTH;
	const int CELLHEIGHT = SCRHEIGHT / CELLAMOUNT_HEIGHT;
	const float m_fCW = SCRWIDTH / CELLAMOUNT_WIDTH;
	const float m_fCH = SCRHEIGHT / CELLAMOUNT_HEIGHT;

private:

	void CheckForPrimaryIntersections(ray& rAPrimaryRay, intersectionData& isdIntersectionData) const;
	void CheckForIntersection(ray& rAPrimaryRay, intersectionData& isdIntersectionData) const;
	ray& CastShadowRay(vec3& aOrigin, vec3& aLightPosition, vec3 aCollideNormal, intersectionData& isdIntersectionData) const;
	vec3 CalculateShadows(intersectionData& isdData);
	
	vec3 CalculateDiffuseColor(bool bShadowRayOccluded, ray& aShadowRay, lightSource& lsALightSource, vec3& v3AIntersectionNormal, material& maObjectMaterial) const;

	static float Fresnel(vec3& v3IncomingDirection, vec3& v3OutgoingDirection, vec3& v3IntersectionNormal, float n1, float n2);
	
	vec3 Trace(ray rPrimaryRay, int iRecursionCap);
	static vec3 ReflectRay(vec3& v3Direction, vec3& v3IntersectionNormal);
	static vec3 RefractRay(vec3& v3Direction, vec3& v3IntersectionNormal, float fInsideRefraction, float fOutsideRefraction = 1.0f);

	void ConstructGrid();

	
	int m_iInterlaceStride = 64;
	int m_iCurrentInterlace = 0;
	
	SDL_Renderer* m_p_reMainRenderer = nullptr;
	SDL_Texture* m_p_tMainTexture = nullptr;
	SDL_Window* m_p_wMainWindow = nullptr;
	
	camera* m_p_cMainCamera = nullptr;
	Uint32* m_piPixels = new Uint32[SCRWIDTH * SCRHEIGHT];

	int iSceneCounter = 0;
	scene* m_p_AllScenes[10]{nullptr};
	scene* m_p_scActiveScene = m_p_AllScenes[0];

	cell* m_p_cScreenCells = new cell[CELLAMOUNT_HEIGHT * CELLAMOUNT_WIDTH];
};

@


1.230304
log
@@
text
@d25 2
a26 2
	const float m_fCW = 1/(SCRWIDTH / CELLAMOUNT_WIDTH);
	const float m_fCH = 1/(SCRHEIGHT / CELLAMOUNT_HEIGHT);
@


1.229950
log
@@
text
@d25 2
d30 1
@


1.228854
log
@@
text
@d2 1
a2 1
#include "plane.h"
a3 1
#include "intersectiondata.h"
d21 5
d40 1
d42 1
a53 1
	scene* m_p_scActiveScene{nullptr};
d55 3
@


1.228236
log
@@
text
@d32 1
a32 1
	vec3 Trace(ray rPrimaryRay, int iReflectionAmount);
d37 1
a37 1
	int m_iInterlaceStride = 32;
@


1.228098
log
@@
text
@d30 1
a30 1
	static float Fresnel(vec3& v3IncomingDirection, vec3& v3OutgoingDirection, vec3 v3IntersectionNormal, float n1, float n2);
d36 3
d45 1
a45 1
	Uint32* pixels = new Uint32[SCRWIDTH * SCRHEIGHT];
@


1.225059
log
@@
text
@d24 5
a28 3
	void CheckForIntersection(ray& rAPrimaryRay, intersectionData& isdIntersectionData);
	ray& CastShadowRay(vec3& aOrigin, vec3& aLightPosition, vec3 aCollideNormal, intersectionData& isdIntersectionData);
	vec3 CalculatePixelColor(bool bShadowRayOccluded, ray& aShadowRay, lightSource& lsALightSource, vec3& v3AIntersectionNormal, material& maObjectMaterial) const;
d30 1
a30 1
	float Fresnel(vec3& v3IncomingDirection, vec3& v3OutgoingDirection, vec3 v3IntersectionNormal, float n1, float n2);
@


1.223997
log
@@
text
@d28 2
@


1.222449
log
@@
text
@d28 1
a28 1
	vec3 Trace(ray rPrimaryRay);
d30 1
@


1.222417
log
@@
text
@d26 1
a26 1
	vec3 CalculatePixelColor(bool bShadowRayOccluded, ray& aShadowRay, lightSource& lsALightSource, vec3& v3AIntersectionNormal, vec3& v3ObjectColor) const;
a41 5
	
	/*int m_iObjectCounter{ 2 };
	sphere* m_spTestSphere = new sphere{ vec3(0, -0.5, -5), 1.0f };
	plane* m_plTestPlane = new plane{ vec3(0, -1.5, 0), vec3(0,1,0), 10 };
	primitive* m_p_prPrimitives[10]{nullptr};*/
@


1.222402
log
@@
text
@d29 1
@


1.222395
log
@@
text
@d5 1
d38 5
a42 1
	int m_iObjectCounter{ 2 };
d45 1
a45 1
	primitive* m_p_prPrimitives[10]{nullptr};
@


1.222025
log
@@
text
@d27 2
@


1.221921
log
@@
text
@d23 3
a25 2
	ray& castShadowRay(vec3& aOrigin, vec3& aEndPoint, vec3 aCollideNormal);
	vec3 CalculatePixelColor(bool bShadowRayOccluded, ray& aShadowRay, lightSource& lsALightSource, vec3& v3AIntersectionNormal, vec3& v3ObjectColor);
d35 1
@


1.221886
log
@@
text
@a23 1
	static rgbColor ConvertToRgb(vec3 a_vec3Color);
@


1.220586
log
@@
text
@d6 1
a15 3
	const int SCRWIDTH = 640;
	const int SCRHEIGHT = 640;

d18 2
a19 1
	ray& castShadowRay(vec3& aOrigin, vec3& aEndPoint, vec3 aCollideNormal);
d23 1
d25 3
d31 1
a36 1

@


1.219891
log
@@
text
@a29 1
	vec3 m_v3PixelColor{};
d31 1
a31 1
	sphere* m_spTestSphere = new sphere{ vec3(0, 4, -15), 5.0f };
@


1.219624
log
@@
text
@d20 1
a20 1
	ray& castShadowRay(vec3& aOrigin, vec3& aEndPoint, vec3& aCollideNormal);
a24 1
	intersectionData m_isdPrimaryIntersections{};
d32 1
a32 1
	sphere* m_spTestSphere = new sphere{ vec3(0, 4, -25), 5.0f };
@


1.219071
log
@@
text
@d20 2
d33 1
a33 1
	sphere* m_spTestSphere = new sphere{ vec3(0, 0, 15), 5.0f };
@


1.218625
log
@@
text
@d4 1
d23 1
@


1.218495
log
@@
text
@d6 1
d20 2
@


1.218296
log
@@
text
@d26 1
a26 1
	sphere* m_spTestSphere = new sphere{ vec3(3, 3, 30), 5.0f };
@


1.218287
log
@@
text
@a1 3
#include <SDL.h>
#include "mathm.h"
#include "sphere.h"
d3 1
@


1.217806
log
@@
text
@d9 1
a9 1
class Renderer
d12 2
a13 2
	Renderer();
	~Renderer();
d28 1
a28 1
	sphere* m_spTestSphere = new sphere{ vec3(0, 0, 15), 5.0f };
@


1.217528
log
@@
text
@d16 1
a16 1
	const int SCRHEIGHT = 480;
@


1.216991
log
@@
text
@d2 1
a2 1
#include "SDL.h"
d5 1
d15 2
a16 2
	const int SCRWIDTH = 600;
	const int SCRHEIGHT = 600;
d28 4
a31 1
	sphere m_spTestSphere{ vec3(0, 0, 15), 5.0f };
@


1.216917
log
@@
text
@d3 2
d25 3
@
